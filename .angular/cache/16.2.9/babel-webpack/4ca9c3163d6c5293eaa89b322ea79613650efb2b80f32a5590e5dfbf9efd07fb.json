{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(client) {\n    this.client = client;\n    this.base_url = 'http://localhost:6001/v1';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  login(email, password) {\n    return this.client.post(`${this.base_url}/auth/login`, {\n      email: email,\n      password: password\n    }, this.httpOptions);\n  }\n  register(firstName, lastName, email, password) {\n    return this.client.post(`${this.base_url}/auth/register`, {\n      firstName: firstName,\n      lastName,\n      email,\n      password\n    }, this.httpOptions);\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  IsLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AuthService","constructor","client","base_url","httpOptions","headers","login","email","password","post","register","firstName","lastName","logout","localStorage","removeItem","IsLoggedIn","getItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/takiacademy/Desktop/e-commerce-front/src/app/services/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { User } from '../../models/user.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private client: HttpClient) {}\n\n  base_url = 'http://localhost:6001/v1';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  public login(email: string, password: string): Observable<void> {\n    return this.client.post<void>(\n      `${this.base_url}/auth/login`,\n      {\n        email: email,\n        password: password,\n      },\n      this.httpOptions\n    );\n  }\n\n  public register(\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string\n  ): Observable<void> {\n    return this.client.post<void>(\n      `${this.base_url}/auth/register`,\n      {firstName :firstName\n        lastName \n        email\n        password},\n      this.httpOptions\n    );\n  }\n\n  public logout() {\n    localStorage.removeItem('token');\n  }\n\n  public IsLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n}\n"],"mappings":"AAGA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,MAAkB;IAAlB,KAAAA,MAAM,GAANA,MAAM;IAE1B,KAAAC,QAAQ,GAAG,0BAA0B;IAErC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EARwC;EAUlCO,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IAC1C,OAAO,IAAI,CAACN,MAAM,CAACO,IAAI,CACrB,GAAG,IAAI,CAACN,QAAQ,aAAa,EAC7B;MACEI,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;KACX,EACD,IAAI,CAACJ,WAAW,CACjB;EACH;EAEOM,QAAQA,CACbC,SAAiB,EACjBC,QAAgB,EAChBL,KAAa,EACbC,QAAgB;IAEhB,OAAO,IAAI,CAACN,MAAM,CAACO,IAAI,CACrB,GAAG,IAAI,CAACN,QAAQ,gBAAgB,EAChC;MAACQ,SAAS,EAAEA,SAAS;MACnBC,QAAQ;MACRL,KAAK;MACLC;IAAQ,CAAC,EACX,IAAI,CAACJ,WAAW,CACjB;EACH;EAEOS,MAAMA,CAAA;IACXC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;EAEOC,UAAUA,CAAA;IACf,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAAC,QAAAC,CAAA,G;qBA5CUlB,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}